---
title: "Computation of phylogenetic trees and clustering of mutations"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{clonesClustering}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

## Before you begin

You should have identified true somatic variants in the mitochondrial (and nuclear) genome. The remaining vignettes of this package document how to get there. Here, we start with count matrices of the alternative and the reference alleles, across a number of sites of interest. Such data is available from two patients (P1, P2) as part of this package.

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(mitoseq)
P1 <- mutationCallsFromMatrix(as.matrix(M_P1), as.matrix(N_P1))
P2 <- mutationCallsFromMatrix(as.matrix(M_P2), as.matrix(N_P2))
```

A first important step is to decide which mutations to include in the clustering. The default is to use all mutations that are covered in at least 20% of the cells, but this assignment can be changed manually. For P2, we removed two variants that were mutant in a small fraction of cells. Feel free to include them or not, it barely affects the result.

```{r select}
P2@cluster["X9010GC"] <- F
P2@cluster["X2392TC"] <- F
```

## Compute a phylogenetic tree

The next step is to run [PhISCS](https://github.com/sfu-compbio/PhISCS) to compute the most likely phylogenetic tree. PhISCS is bundled in this package, but the package needs to be run in an environment where [gurobi](https://www.gurobi.com) and the `gurobipy` python package are available. For example, you could set up a `conda` environment that contains this package.

```{r runPhiscs}
P1 <- muta_cluster(P1, python_env = "module load Anaconda3/2019.07; source activate gurobi",cores=6, tempfolder = "/g/steinmetz/project/singcellTxn/AML/MitochondriaRevisions/package/runs/P342debug")
P2 <- muta_cluster(P2, python_env = "module load Anaconda3/2019.07; source activate gurobi",cores=6,
                   tempfolder = "/g/steinmetz/project/singcellTxn/AML/MitochondriaRevisions/package/runs/P101debug")
```

This step can take a while to run. It computes a likely phylogenetic tree of all the mutations. If you have grpaphviz (`dot`) installed, you can create postscript files displaying these plots:

```{r plotTree}
plotTree(P1, file = "P1.ps")
plotTree(P2, file = "P2.ps")
```

## Identify clones and assign cells to clones

In many cases, the order of the leaves on these trees is arbitrary, because mutations systematically co-occur. We  therefore cluster the mutations into clones. In detail, we take every every branch on the tree and then shuffle the order of mutations in that branch while re-calculating the likelihood. If swapping nodes leads to small changes in the likelihood, these nodes are then merged into a "clone". The parameter `min.lik` controls the merging and can be adjusted after inspection of the dendrograms. This step also assigns each cell to the most likely clone, and provides an estimate of the likelihood. The `help(mutationCalls)` for more info on how these results are stored.

```{r clusterClonesP1, fig.width=8,fig.height=6}
P1 <- clusterMetaclones(P1)
```


```{r clusterClonesP2, fig.width=8,fig.height=6}
P2 <- clusterMetaclones(P2)
```

Finally, the clustering can be plotted.

```{r plotClonesP1, fig.width=8,fig.height=6}
plotClones(P1)
```


```{r plotClonesP2, fig.width=8,fig.height=6}
plotClones(P2)
```

